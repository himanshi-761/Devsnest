{"version":3,"sources":["actions/index.js","components/Form.jsx","components/WeatherCard.jsx","components/ToggleTheme.jsx","App.jsx","reducers/placeReducer.js","reducers/placeDataReducer.js","reducers/themeReducer.js","reducers/index.js","store.js","index.js"],"names":["updatePlaceData","place","fetchData","a","fetchWeatherData","fetch","fetchAstroData","Promise","all","weatherDataJson","astroDataJson","json","weatherData","astroData","dispatch","then","data","console","log","type","payload","Form","theme","useSelector","state","useDispatch","useEffect","className","value","onChange","e","updatePlace","target","onClick","WeatherCard","placeData","location","name","src","current","condition","icon","alt","temp_c","text","wind_kph","humidity","precip_in","style","position","top","marginLeft","astronomy","astro","sunrise","marginRight","ToggleTheme","App","placeReducer","action","placeDataReducer","themeReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4663c5d6.chunk.js","sourcesContent":["const updatePlace = (place) => {\n    return {\n        type: \"UPDATE_PLACE\",\n        payload: place\n    }\n}\n\n\nconst updatePlaceData = (place) => {\n\n    const fetchData = async () => {\n        const fetchWeatherData = fetch(`https://api.weatherapi.com/v1/current.json?key=7689468754f047a7b6a100121210908&q=${place}`)\n        const fetchAstroData = fetch(`https://api.weatherapi.com/v1/astronomy.json?key=7689468754f047a7b6a100121210908&q=${place}`)\n        const [weatherDataJson, astroDataJson] = await Promise.all([fetchWeatherData, fetchAstroData])\n        const [weatherData, astroData] = await (Promise.all([weatherDataJson.json(), astroDataJson.json()]))\n        return { ...weatherData, ...astroData };\n    }\n\n    return (dispatch) => {\n        fetchData().then(data => {\n            console.log(data);\n            dispatch({\n                type: \"UPDATE_PLACE_DATA\",\n                payload: data,\n            })\n        })\n    }\n};\n\nconst toggleTheme = () => {\n    return {\n        type: \"TOGGLE_THEME\",\n    };\n}\n\nexport { updatePlace, updatePlaceData, toggleTheme };","import { useSelector, useDispatch } from 'react-redux'\nimport { updatePlace, updatePlaceData } from '../actions';\nimport { useEffect } from 'react';\n\nconst Form = () => {\n    const theme = useSelector(state => state.theme);\n    const place = useSelector(state => state.place);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(updatePlaceData(place));\n    }, [])\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12 form\">\n                    <input type=\"text\" value={place} onChange={(e) => dispatch(updatePlace(e.target.value))} />\n                    <button className={theme ? \"btn btn-light\" : \"btn btn-dark\"} onClick={() => {\n                        dispatch(updatePlaceData(place))\n                    }}>\n                        Submit\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Form;","import {useSelector} from 'react-redux';\n\nconst WeatherCard = () => {\n\tconst theme = useSelector(state => state.theme);\n    const placeData = useSelector(state => state.placeData);\n    \n    return (\n        <div className=\"offset-md-2 col-12 col-md-8 offset-lg-4 col-lg-4 weather\">\n            <div className={theme ? \"card dark\" : \"card\"}>\n                {\n                    placeData.location ? (\n                        <div>\n                            <div className=\"place\">{placeData.location.name}</div>\n                            <img src={placeData.current.condition.icon} alt=\"img\" />\n                            <div className=\"temp\">{placeData.current.temp_c}Â°C</div>\n                            <div className=\"desc\">{placeData.current.condition.text}</div>\n                            <div className=\"container\">\n                                <div className=\"row whp\">\n                                    <div className=\"col\">\n                                        <div className=\"title\">Wind Now</div>\n                                        <div className=\"data\">\n                                            {placeData.current.wind_kph}<span className=\"unit\">KM</span>\n                                        </div>\n                                    </div>\n                                    <div className=\"col\">\n                                        <div className=\"title\">Humidity</div>\n                                        <div className=\"data\">\n                                            {placeData.current.humidity}<span className=\"unit\">%</span>\n                                        </div>\n                                    </div>\n                                    <div className=\"col\">\n                                        <div className=\"title\">Precipitation</div>\n                                        <div className=\"data\">\n                                            {placeData.current.precip_in}<span className=\"unit\">%</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row whp\">\n                                <div className=\"col-4 offset-2 offset-lg-1 col-lg-5\">\n                                    <div className=\"data\">\n                                        <i style={{ position: \"relative\", top: \"3px\" }} className=\"bi bi-sunrise-fill\"></i>\n                                        <span style={{ marginLeft: \"10px\" }} className=\"unit\">{placeData.astronomy.astro.sunrise}</span>\n                                    </div>\n                                </div>\n                                <div className=\"col-4 col-lg-5\">\n                                    <div className=\"data\">\n                                        <span style={{ marginRight: \"10px\" }} className=\"unit\">{placeData.astronomy.astro.sunrise}</span>\n                                        <i style={{ position: \"relative\", top: \"3px\" }} className=\"bi bi-sunset-fill\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (<h2>Place not found</h2>)\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default WeatherCard;","import { useSelector, useDispatch } from 'react-redux';\nimport { toggleTheme } from '../actions';\nconst ToggleTheme = () => {\n    const dispatch = useDispatch();\n    const theme = useSelector(state => state.theme)\n    return (\n        <div className=\"toggle-theme\">\n            <button className={theme ? \"btn btn-light\" : \"btn btn-dark\"}\n                onClick={() => dispatch(toggleTheme())}>\n                {theme ? \"Dark\" : \"Light\"}\n            </button>\n        </div>\n    )\n}\n\nexport default ToggleTheme;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport './App.css';\nimport Form from './components/Form';\nimport WeatherCard from './components/WeatherCard'\nimport ToggleTheme from './components/ToggleTheme';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n\tconst theme = useSelector(state => state.theme);\n\treturn (\n\t\t<div className={theme ? \"App dark\" : \"App\"}>\n\t\t\t<ToggleTheme />\n\t\t\t<Form />\n\t\t\t<WeatherCard />\n\t\t</div>\n\t)\n}\n\nexport default App;\n","const placeReducer = (state = \"Lucknow\", action) => {\n    if (action.type === \"UPDATE_PLACE\") {\n        return action.payload;\n    }\n    return state;\n}\n\nexport default placeReducer;","const placeDataReducer = (state = {}, action) => {\n    if (action.type === \"UPDATE_PLACE_DATA\") {\n        return action.payload;\n    }\n    return state;\n}\n\nexport default placeDataReducer;","const themeReducer = (state = false, action) => {\n    if (action.type === \"TOGGLE_THEME\")\n        return !state;\n    return state;\n}\n\nexport default themeReducer;","import { combineReducers } from 'redux';\nimport placeReducer from './placeReducer';\nimport placeDataReducer from './placeDataReducer';\nimport themeReducer from './themeReducer';\n\nconst rootReducer = combineReducers({\n    place: placeReducer,\n    placeData: placeDataReducer,\n    theme: themeReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from 'redux-thunk';\nimport { logger } from 'redux-logger';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"bg-img\"></div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}